// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import (
	context "context"
	domain "frieda-golang-training-beginner/domain"

	mock "github.com/stretchr/testify/mock"
)

// IPaymentCodeUsecase is an autogenerated mock type for the IPaymentCodeUsecase type
type IPaymentCodeUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, request
func (_m *IPaymentCodeUsecase) Create(ctx context.Context, request domain.CreatePaymentCodeRequestPayload) (domain.PaymentCode, error) {
	ret := _m.Called(ctx, request)

	var r0 domain.PaymentCode
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreatePaymentCodeRequestPayload) domain.PaymentCode); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(domain.PaymentCode)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.CreatePaymentCodeRequestPayload) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, uuid
func (_m *IPaymentCodeUsecase) Get(ctx context.Context, uuid string) (domain.GetPaymentCodeResponsePayload, error) {
	ret := _m.Called(ctx, uuid)

	var r0 domain.GetPaymentCodeResponsePayload
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.GetPaymentCodeResponsePayload); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(domain.GetPaymentCodeResponsePayload)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
